[
["index.html", "STAT 454 Bayesian Statistics - Pet Adoption Chapter 1 Preface", " STAT 454 Bayesian Statistics - Pet Adoption Connie Zhang, Spring 2020 Macalester College Chapter 1 Preface Hello! Welcome to the bookdown of my STAT 454 Bayesian Statistics project! "],
["motivation.html", "Chapter 2 Motivation 2.1 Why this? 2.2 A snapshot", " Chapter 2 Motivation 2.1 Why this? sdghj 2.2 A snapshot asdfash "],
["data-source.html", "Chapter 3 Data Source 3.1 Variable Table", " Chapter 3 Data Source dfd 3.1 Variable Table "],
["data-cleaning.html", "Chapter 4 Data Cleaning", " Chapter 4 Data Cleaning “Names”- changing this to a factor indicating has a name or no name. Some “Names” just have female/male, Dog, cat, or a number, I considered them as no name. Health-related variables: “Sterilized”, “Dewormed”, “Vaccinated”, and “Health”. I changed these from numerical to factor variables. I also renumbered not sterilized/dewormed/vaccinated as 0, and sterilized/dewromed/vaccinated as 1, and those with no information given as NA. For “Health”, 0 indicates healthy, 1 minor injury, and 2 severe injury when rescued. “MixedBreed”: This is a new variable that I created. If Breed1 is 307, then the animal is mixed breed. “Description”- I changed this to “description length”, indicating the number of words in the description. “magnitude” and “score” are the two variables related to description sentiments. These are generated by Google’s Natural Language API. I extracted these variables from the json files and added them to my data. “Score” refers to how negative and positive the description is, -1 being the most negative, 1 being the most positive. “Magnitude” indicates the strength of the description. "],
["visualizations.html", "Chapter 5 Visualizations 5.1 General Impression 5.2 Starting off", " Chapter 5 Visualizations 5.1 General Impression 5.2 Starting off "],
["ordered-logistic-regression.html", "Chapter 6 Ordered Logistic Regression 6.1 Proportional Odds Assumption 6.2 Interpretation", " Chapter 6 Ordered Logistic Regression Have you ever wondered what to do when you want to predict more than 2 categories, and these categories seem to be ordered*? Ordered logistic regression is the way to go! 6.1 Proportional Odds Assumption For ordered logistic regression, we assume that the relationship between each pair of outcome groups is the same. In other words, the coefficient for variable A will be the same regardless of whether it’s describing the relationship between outcome group 1 and 2, or outcome group 2 and 3. 6.2 Interpretation The interpretation for ordered logistic regression is very similar to logistic regression. Let Y be an ordinal outcome with J categories. \\(\\beta_{j0}\\)s are the “cutpoints” between adjacent categories, often seen as the intercept. \\(\\beta_i\\)s are the coefficients, and \\(x_i\\)s are prediction variables. Our logistic regression model would look something like this: \\[logit(P(Y\\leq j))=\\beta_{j0}+\\beta_1x_1-...-\\beta_nx_n\\] We will see a specific example of this in the next chapter. *In this case, we have 5 categories for adoption speed, and we believe that the “distance” between these 5 adoption speeds are not equal. "],
["modelling.html", "Chapter 7 Modelling 7.1 Model 1 7.2 Model 2 7.3 Making some adjustments 7.4 Model 3", " Chapter 7 Modelling First, let’s load some essential package. We will also create a sample of 1000 for faster modelling. load(&quot;adoption.RData&quot;) set.seed(454) mysample &lt;- adoption[sample(1:nrow(adoption), 1000, replace=FALSE),] Below is the function I wrote to compute the accuracy of each model. ordinal_accuracy&lt;-function(post_preds,mydata){ post_preds&lt;-as.data.frame(post_preds) results&lt;-c() for (j in (1:length(post_preds))){ results[j]&lt;-as.numeric(tail(names(sort(table(post_preds[,j]))))[5]) } results&lt;-as.data.frame(results) compare&lt;-cbind(results,mydata$AdoptionSpeed) compare&lt;-compare %&gt;%mutate(results=as.numeric(results)) compare&lt;-compare %&gt;% mutate(`mydata$AdoptionSpeed`=as.numeric(`mydata$AdoptionSpeed`)) compare&lt;-compare %&gt;%mutate(accuracy=ifelse(as.numeric(results)==as.numeric(`mydata$AdoptionSpeed`),1,0)) print(sum(compare$accuracy)/length(post_preds)) } 7.1 Model 1 From fig 1- fig n, we see that health factors and type can be useful factors in predicting adoption speed. For this model, we have to set a R2 prior. I set R2 at 0.5 and what=NULL, which will give us a standard uniform prior on R2. ### Model Building \\[ \\text{Let }Y_i\\text{ be the adoption speed with k=0,1,2,3,4.} \\\\y_i|(\\beta_{0k},\\beta_1,...,\\beta_6)\\sim Bern(\\theta_{ki})\\text{ where }\\theta_{ki}\\text{ is the }P(Y_i\\leq k)\\text{ for the }i^{th}\\text{ animal.} \\\\log(\\frac{\\theta_{ki}}{1-\\theta_{ki}})=logit(\\hat P(Y\\leq k))=\\beta_{k0}+\\beta_1x_1...+\\beta_5x_5 \\\\\\text{ where }x_i\\text{ for i from 1 to 6 is the indicator for cat, minor injury, severe injury,} \\\\\\text{sterilization, vaccination, and dewormed.} \\\\\\beta_{k0}\\sim N(m_{k0},s_{k0}^2) \\\\\\beta_1\\sim N(m_1,s_1^2) \\\\...\\] model1 &lt;- stan_polr(AdoptionSpeed ~ Type+Health+Sterilized+Vaccinated+Dewormed, data =mysample, prior=R2(0.5,what=NULL),iter=5000, seed = 454) 7.1.1 Posterior Inference model1_summary&lt;-summary(model1) head(as.data.frame(model1_summary), -2) ## mean mcse sd 10% 50% ## Type1 -0.291472332 1.067107e-03 0.128917172 -0.45490997 -0.291619825 ## Health1 0.441523473 3.135560e-03 0.350471059 -0.01079189 0.437815394 ## Health2 2.289862443 1.401822e-02 1.356098798 0.68125324 2.195511682 ## Sterilized1 0.690688772 1.535365e-03 0.164162835 0.48092258 0.688819102 ## Vaccinated1 0.318715747 1.655190e-03 0.179963272 0.08924947 0.318538724 ## Dewormed1 -0.001789522 1.616438e-03 0.168594313 -0.21720001 -0.001004759 ## 0|1 -3.355148548 2.201978e-03 0.232536209 -3.65773490 -3.349498499 ## 1|2 -1.058289904 1.284121e-03 0.139953255 -1.23837624 -1.057180267 ## 2|3 0.276656461 1.187258e-03 0.133952418 0.10538132 0.276139337 ## 3|4 1.272267361 1.207162e-03 0.140589158 1.09125504 1.271952833 ## mean_PPD:0 0.031505172 8.265987e-05 0.008632395 0.02093596 0.030788177 ## mean_PPD:1 0.203957020 1.955397e-04 0.019572049 0.17980296 0.203201970 ## mean_PPD:2 0.288257266 2.204405e-04 0.022416216 0.25985222 0.288177340 ## mean_PPD:3 0.214343966 1.973403e-04 0.020048851 0.18965517 0.214285714 ## 90% n_eff Rhat ## Type1 -0.12640415 14595 0.9999596 ## Health1 0.89662335 12493 0.9997813 ## Health2 4.02976553 9358 0.9999248 ## Sterilized1 0.90384820 11432 1.0000488 ## Vaccinated1 0.54993335 11821 0.9998534 ## Dewormed1 0.21453193 10878 0.9998297 ## 0|1 -3.06134550 11152 1.0000541 ## 1|2 -0.87929294 11878 0.9998446 ## 2|3 0.44947033 12729 1.0000083 ## 3|4 1.45397384 13564 1.0001160 ## mean_PPD:0 0.04310345 10906 0.9999094 ## mean_PPD:1 0.23029557 10018 0.9999413 ## mean_PPD:2 0.31650246 10341 1.0001028 ## mean_PPD:3 0.24014778 10322 1.0000672 set.seed(454) model_data1&lt;-mysample %&gt;% dplyr::select(AdoptionSpeed, Type,Health,Sterilized,Vaccinated,Dewormed) %&gt;% na.omit() my_prediction1 &lt;- posterior_predict( model1, newdata = model_data1) ordinal_accuracy(my_prediction1,model_data1) ## [1] 0.2438424 The formula using the posterior means of each variable is: \\[logit(\\hat P(Y\\leq k))=\\beta_{k0}-0.291*Type+0.442*Health1+2.290*Health2+0.691*Sterilized1 \\\\+0.319*Vaccinated1-0.002*Dewormed1 \\\\\\text{For k =0,1,2,3,4}, \\beta_{k0}=0,-3.62,-1.42,-0.17,0.76\\text{ respectively}\\] The accuracy for this model is 0.244. If an animal has a severe injury, then the odds of that animal getting adopted slower will increase by e^2.290=9.87 times than a healthy animal, keeping all other variables constant. We can see that the mean of Dewormed is near zero, therefore, we will exclude Dewormed in our future model. 7.2 Model 2 With further investigations, we have also found “AgeGroup” and “mix_breed” to be important factors. We will include these in our models. 7.2.1 Model Building \\[ \\text{Let }Y_i\\text{ be the adoption speed with k=0,1,2,3,4.} \\\\y_i|(\\beta_{0k},\\beta_1,...,\\beta_10)\\sim Bern(\\theta_{ki})\\text{ where }\\theta_{ki}\\text{ is the }P(Y_i\\leq k)\\text{ for the }i^{th}\\text{ animal.} \\\\log(\\frac{\\theta_{ki}}{1-\\theta_{ki}})=logit(\\hat P(Y\\leq k))=\\beta_{k0}+\\beta_1x_1...+\\beta_{10}x_{10} \\\\\\text{ where }x_i\\text{ for i from 1 to 11 is the indicator for cat, minor/severe injury,} \\\\\\text{sterilization, vaccination, age groups 1-5, and Mix breed.} \\\\\\beta_{k0}\\sim N(m_{k0},s_{k0}^2) \\\\\\beta_1\\sim N(m_1,s_1^2) \\\\...\\] model2 &lt;- stan_polr(AdoptionSpeed ~ Type+Health+Sterilized+Vaccinated+AgeGroup+MixedBreed, data =mysample, prior=R2(0.5,what=NULL),iter=5000, seed = 454) 7.2.2 Posterior Inference model2_summary&lt;- summary(model2) head(as.data.frame(model2_summary), -2) ## mean mcse sd 10% 50% ## Type1 0.48778366 1.707863e-03 0.221427458 0.19976369 0.48937164 ## Health1 0.47969467 3.195916e-03 0.348317802 0.03818016 0.47965636 ## Health2 1.67486939 1.220502e-02 1.279389983 0.13553622 1.58676636 ## Sterilized1 0.47813952 1.457010e-03 0.181320803 0.24420605 0.47770227 ## Vaccinated1 0.24826375 1.199002e-03 0.149064908 0.05697017 0.24762385 ## AgeGroup1 0.54348134 1.459234e-03 0.170443602 0.32467603 0.54231742 ## AgeGroup2 0.66716931 1.993412e-03 0.227959035 0.37680824 0.66989071 ## AgeGroup3 0.96625893 3.180660e-03 0.345682844 0.51766283 0.95983629 ## AgeGroup4 0.65239525 3.793133e-03 0.437359847 0.08932112 0.64813984 ## AgeGroup5 0.53430605 5.266733e-03 0.592109782 -0.22336947 0.52774019 ## MixedBreed1 1.06601710 2.044574e-03 0.228975968 0.77289049 1.06582076 ## 0|1 -2.45032288 2.856396e-03 0.287372279 -2.81857404 -2.44775572 ## 1|2 -0.13451482 2.159830e-03 0.230288981 -0.43149332 -0.13648189 ## 2|3 1.23866701 2.011140e-03 0.232081787 0.93921284 1.23811248 ## 3|4 2.26420168 2.033693e-03 0.241510274 1.95486028 2.26515793 ## mean_PPD:0 0.03138345 7.841415e-05 0.008449069 0.02068127 0.03041363 ## mean_PPD:1 0.20154197 1.840315e-04 0.019143089 0.17761557 0.20072993 ## mean_PPD:2 0.28724696 2.128690e-04 0.022075926 0.25912409 0.28710462 ## mean_PPD:3 0.21470985 1.891734e-04 0.019819265 0.18978102 0.21411192 ## 90% n_eff Rhat ## Type1 0.76985933 16810 0.9998001 ## Health1 0.92512579 11878 0.9998389 ## Health2 3.31114337 10988 0.9999712 ## Sterilized1 0.70659244 15487 0.9997555 ## Vaccinated1 0.43924717 15457 0.9997827 ## AgeGroup1 0.76354356 13643 1.0000624 ## AgeGroup2 0.95776625 13077 0.9998310 ## AgeGroup3 1.41472859 11812 0.9996562 ## AgeGroup4 1.21477049 13295 0.9997109 ## AgeGroup5 1.29127895 12639 0.9998504 ## MixedBreed1 1.35920999 12542 0.9997835 ## 0|1 -2.08201004 10122 0.9998176 ## 1|2 0.16165719 11369 0.9997512 ## 2|3 1.53309341 13317 0.9998544 ## 3|4 2.57697695 14103 0.9998261 ## mean_PPD:0 0.04257908 11610 0.9998802 ## mean_PPD:1 0.22627737 10820 1.0000967 ## mean_PPD:2 0.31630170 10755 0.9999731 ## mean_PPD:3 0.23965937 10976 0.9998674 set.seed(454) model_data2&lt;-mysample %&gt;% dplyr::select(AdoptionSpeed, Type,Health,Sterilized,Vaccinated,AgeGroup,MixedBreed) %&gt;% na.omit() my_prediction2 &lt;- posterior_predict( model2, newdata = model_data2) ordinal_accuracy(my_prediction2,model_data2) ## [1] 0.2372263 The model accuracy is something. If an animal has a severe injury, then the odds of that animal getting adopted slower will increase by e^2.290=9.87 times than a healthy animal, keeping all other variables constant. We can see that the mean of Dewormed is near zero, therefore, we will exclude Dewormed in our future model. If an animal is in age group 1(4 to 11 months), then the odds of that animal getting adopted slower will increase by e^0.5=1.65 times than an animal that is in age group 0 (0 to 3 months), keeping all other variables constant. Similar situations apply to other age groups as well. From this, we can reasonably infer that animals in age group 0 are the most popular. If an animal is a Mixed Breed, then the odds of that animal getting adopted slower will increase by e^1.1=3.00 times than an animal that is not mixed breed, keeping all other variables constant. 7.3 Making some adjustments Our accuracy is less than ideal. One reason behind this could be due to how adoption speed is grouped. Group 0 is being adopted the day of, group 1 is being adopted between 2-7 days, and group 2 is being adopted between 8-30 days. The difference between group 0,1, and 2 can be due to chance. Therefore, I’ve decided to group groups 0,1, and 2 into 1 group. In our future models, we will be predicting for 3 adoption speed groups. 7.4 Model 3 In this model, we will be adding two interaction terms. The figure below shows that the younger the animal is, the less likely it will get sterilized, since the procedure can’t be done when they are young. Moreover, only dogs can be mixed breed. Therefore, we will add two interaction terms: Type\\(*\\)MixedBreed and AgeGroup\\(*\\)Sterilization. set.seed(454) mysample2 &lt;- adoption[sample(1:nrow(adoption), 1000, replace=FALSE),] ordinal_accuracy2&lt;-function(post_preds,mydata){ post_preds&lt;-as.data.frame(post_preds) results&lt;-c() for (j in (1:length(post_preds))){ results[j]&lt;-as.numeric(tail(names(sort(table(post_preds[,j]))))[3]) } results&lt;-as.data.frame(results) compare&lt;-cbind(results,mydata$AdoptionSpeed_Group) compare&lt;-compare %&gt;%mutate(results=as.numeric(results)) compare&lt;-compare %&gt;% mutate(`mydata$AdoptionSpeed_Group`=as.numeric(`mydata$AdoptionSpeed_Group`)) compare&lt;-compare %&gt;%mutate(accuracy=ifelse(as.numeric(results)==as.numeric(`mydata$AdoptionSpeed_Group`),1,0)) print(sum(compare$accuracy)/length(post_preds)) } 7.4.1 Model Building \\[ \\text{Let }Y_i\\text{ be the adoption speed with k=0,1,2.} \\\\y_i|(\\beta_{0k},\\beta_1,...,\\beta_16)\\sim Bern(\\theta_{ki})\\text{ where }\\theta_{ki}\\text{ is the }P(Y_i\\leq k)\\text{ for the }i^{th}\\text{ animal.} \\\\log(\\frac{\\theta_{ki}}{1-\\theta_{ki}})=logit(\\hat P(Y\\leq k))=\\beta_{k0}+\\beta_1x_1...+\\beta_{10}x_{10}+\\beta_{11}x_1*x_10+\\beta_{12}x_2*x_5+...+\\beta_{16}x_2*x_9 \\\\\\text{ where }x_i\\text{ for i from 1 to 10 is the indicator for cat, minor/severe injury,} \\\\\\text{sterilization, vaccination, age groups 1-5, and Mix breed.} \\\\\\beta_{12}\\text{ is the coefficient for the interaction term of Type*MixedBreed, and }\\beta_{13}\\text{ to } \\\\\\beta_{16}\\text{ are the coefficients for the interaction terms of AgeGroup*Sterilization.} \\\\\\beta_{k0}\\sim N(m_{k0},s_{k0}^2) \\\\\\beta_1\\sim N(m_1,s_1^2) \\\\...\\] model3 &lt;- stan_polr(AdoptionSpeed_Group ~ Type+MixedBreed+Health+Vaccinated+AgeGroup+Sterilized, data=mysample2, prior=R2(0.5,what= NULL),iter=5000, seed = 454) 7.4.2 Posterior Inference model3_summary&lt;- summary(model3) head(as.data.frame(model3_summary), -2) ## mean mcse sd 10% 50% 90% ## Type1 0.3451827 0.0019710823 0.23476422 0.04353292 0.3425949 0.6421678 ## MixedBreed1 0.9758830 0.0022277932 0.24084355 0.66773156 0.9752728 1.2843762 ## Health1 0.5549085 0.0031939476 0.35711011 0.09364087 0.5573441 1.0099537 ## Health2 1.6569184 0.0128234459 1.29691140 0.12056026 1.5538236 3.3182407 ## Vaccinated1 0.1700844 0.0012275795 0.16079859 -0.03401840 0.1706597 0.3776179 ## AgeGroup1 0.5505604 0.0016178448 0.18017912 0.31706524 0.5493472 0.7840974 ## AgeGroup2 0.7259747 0.0019790205 0.23643728 0.42795142 0.7253973 1.0323629 ## AgeGroup3 0.9113914 0.0030942282 0.35135824 0.46744848 0.9097726 1.3594050 ## AgeGroup4 0.5862925 0.0040405589 0.47104174 -0.01181623 0.5814861 1.1957654 ## AgeGroup5 0.3243656 0.0055521388 0.64586317 -0.51509322 0.3412998 1.1392635 ## Sterilized1 0.5207101 0.0016653392 0.18600371 0.28016222 0.5200531 0.7599464 ## 1|2 1.1190016 0.0022699191 0.24307702 0.80645532 1.1160157 1.4277635 ## 2|3 2.1449649 0.0022639660 0.25308847 1.82145025 2.1405737 2.4761848 ## mean_PPD:1 0.5203933 0.0002372490 0.02376417 0.49026764 0.5206813 0.5510949 ## mean_PPD:2 0.2144968 0.0002032269 0.02032452 0.18856448 0.2141119 0.2408759 ## n_eff Rhat ## Type1 14186 0.9997899 ## MixedBreed1 11687 0.9999682 ## Health1 12501 1.0000555 ## Health2 10228 1.0002430 ## Vaccinated1 17158 0.9996834 ## AgeGroup1 12403 1.0002466 ## AgeGroup2 14274 0.9998599 ## AgeGroup3 12894 0.9997617 ## AgeGroup4 13591 0.9999414 ## AgeGroup5 13532 0.9999226 ## Sterilized1 12475 1.0003604 ## 1|2 11467 0.9998890 ## 2|3 12497 0.9998815 ## mean_PPD:1 10033 1.0001560 ## mean_PPD:2 10002 0.9998024 set.seed(454) model_data3&lt;-mysample2 %&gt;% dplyr::select(AdoptionSpeed_Group, Type,Health,Sterilized,Vaccinated,AgeGroup,MixedBreed) %&gt;% na.omit() my_prediction3 &lt;- posterior_predict( model3, newdata = model_data3) ordinal_accuracy2(my_prediction3,model_data3) ## [1] 0.5596107 The model accuracy is 0.560, that’s a big improvement! "],
["final-model.html", "Chapter 8 Final Model 8.1 Model Building 8.2 Diagnostic Plots 8.3 Posterior Inference 8.4 Discussion", " Chapter 8 Final Model Finally! We are ready for our final model! Now, let’s use our test and train data. load(&#39;adoption.RData&#39;) set.seed(454) adoption_split &lt;- initial_split(adoption, prop = .7) adoption_train &lt;- training(adoption_split) adoption_test &lt;- testing(adoption_split) # set.seed(454) # adoption_train &lt;- adoption_train[sample(1:nrow(adoption_train), 500, # replace=FALSE),] # adoption_test&lt;-adoption_test[sample(1:nrow(adoption_test),250,replace=FALSE),] 8.1 Model Building \\[ \\text{Let }Y_i\\text{ be the adoption speed with k=0,1,2.} \\\\y_i|(\\beta_{0k},\\beta_1,...,\\beta_15)\\sim Bern(\\theta_{ki})\\text{ where }\\theta_{ki}\\text{ is the }P(Y_i\\leq k)\\text{ for the }i^{th}\\text{ animal.} \\\\log(\\frac{\\theta_{ki}}{1-\\theta_{ki}})=logit(\\hat P(Y\\leq k))=\\beta_{k0}+\\beta_1x_1...+\\beta_{10}x_{10}+\\beta_{11}x_1*x_10+\\beta_{12}x_2*x_5+...+\\beta_{16}x_2*x_9 \\\\\\text{ where }x_i\\text{ for i from 1 to 10 is the indicator for cat, minor/severe injury,} \\\\\\text{sterilization, age groups 1-5, and Mix breed.} \\\\\\beta_{12}\\text{ is the coefficient for the interaction term of Type*MixedBreed, and }\\beta_{13}\\text{ to } \\\\\\beta_{16}\\text{ are the coefficients for the interaction terms of AgeGroup*Sterilization.} \\\\\\beta_{k0}\\sim N(m_{k0},s_{k0}^2) \\\\\\beta_1\\sim N(m_1,s_1^2) \\\\...\\] final_model &lt;- stan_polr(AdoptionSpeed_Group ~ Type*MixedBreed+Health+Sterilized*AgeGroup, data =adoption_train, prior=R2(0.5,what=NULL),iter=5000, seed = 454) 8.2 Diagnostic Plots Let’s look at some diagnostic plots! The trace plots show that all chains overlap without a pattern. The density plot also shows chains overlapping. The pp_check also shows no abnormal patterns. mcmc_trace(final_model) mcmc_dens_overlay(final_model) pp_check(final_model) 8.3 Posterior Inference final_model_summary&lt;- summary(final_model) head(as.data.frame(final_model_summary), -2) ## mean mcse sd 10% ## Type1 0.55324562 5.450454e-04 0.067972248 0.46483044 ## MixedBreed1 1.06318355 6.057704e-04 0.069597623 0.97480407 ## Health1 0.21518841 1.110681e-03 0.122186905 0.06095336 ## Health2 0.46906848 4.657286e-03 0.485278981 -0.15002129 ## Sterilized1 0.70538087 1.342419e-03 0.140259684 0.52140574 ## AgeGroup1 0.88612023 5.265084e-04 0.059696574 0.80957865 ## AgeGroup2 1.07574108 8.196934e-04 0.087154667 0.96498714 ## AgeGroup3 0.97119919 1.484276e-03 0.160364847 0.76596417 ## AgeGroup4 0.69497692 2.420120e-03 0.245471775 0.38302011 ## AgeGroup5 1.23313469 2.739425e-03 0.301253163 0.84356176 ## Type1:MixedBreed1 16.38712159 2.788769e-01 12.224207824 3.10183396 ## Sterilized1:AgeGroup1 -0.34854266 1.592412e-03 0.166436814 -0.56054245 ## Sterilized1:AgeGroup2 -0.24287677 1.695753e-03 0.174026062 -0.46464188 ## Sterilized1:AgeGroup3 -0.36499681 2.226908e-03 0.231066947 -0.65942334 ## Sterilized1:AgeGroup4 -0.08299334 3.264202e-03 0.321884568 -0.49697579 ## Sterilized1:AgeGroup5 -0.32553321 3.801849e-03 0.381588876 -0.81327658 ## 1|2 1.26453439 5.979261e-04 0.068066142 1.17738499 ## 2|3 2.32111604 6.076589e-04 0.071312780 2.22969547 ## mean_PPD:1 0.51028151 7.234882e-05 0.007008311 0.50135325 ## mean_PPD:2 0.22274171 5.927455e-05 0.006181765 0.21489661 ## 50% 90% n_eff Rhat ## Type1 0.5533768 0.64007248 15552 0.9996826 ## MixedBreed1 1.0631939 1.15079427 13200 0.9997197 ## Health1 0.2147546 0.36975078 12102 0.9999215 ## Health2 0.4669237 1.08419208 10857 0.9998238 ## Sterilized1 0.7071647 0.88462549 10917 1.0003414 ## AgeGroup1 0.8856529 0.96257346 12855 0.9997073 ## AgeGroup2 1.0755650 1.18602234 11305 0.9997492 ## AgeGroup3 0.9709156 1.17491749 11673 0.9997387 ## AgeGroup4 0.6991856 1.00797587 10288 0.9999504 ## AgeGroup5 1.2372309 1.61889575 12093 0.9997890 ## Type1:MixedBreed1 13.8552125 33.40589650 1921 1.0013566 ## Sterilized1:AgeGroup1 -0.3501312 -0.13333359 10924 0.9999779 ## Sterilized1:AgeGroup2 -0.2457145 -0.02067051 10532 1.0000624 ## Sterilized1:AgeGroup3 -0.3655172 -0.06871630 10766 0.9999318 ## Sterilized1:AgeGroup4 -0.0837725 0.32655525 9724 0.9998016 ## Sterilized1:AgeGroup5 -0.3358608 0.17423792 10074 0.9998414 ## 1|2 1.2637562 1.35222578 12959 0.9997043 ## 2|3 2.3203994 2.41246188 13773 0.9996658 ## mean_PPD:1 0.5103389 0.51921620 9383 0.9998999 ## mean_PPD:2 0.2227996 0.23048609 10876 1.0001687 set.seed(454) model_data&lt;-adoption_test %&gt;% dplyr::select(AdoptionSpeed_Group,Type,Health,AgeGroup,MixedBreed,Sterilized) %&gt;% na.omit() final_prediction &lt;- posterior_predict( final_model, newdata = model_data) ordinal_accuracy2(final_prediction,model_data) ## [1] 0.5531591 8.4 Discussion What this model tells us. Which factors are important? What can we do to improve our model (cuteness meter)? "],
["shiny-apps.html", "Chapter 9 Shiny Apps! 9.1 User Input", " Chapter 9 Shiny Apps! 9.1 User Input "],
["final-reflections.html", "Chapter 10 Final Reflections 10.1 Advice for first time capstone people 10.2 Acknowledgements 10.3 Citations", " Chapter 10 Final Reflections 10.1 Advice for first time capstone people 10.2 Acknowledgements 10.3 Citations "]
]
