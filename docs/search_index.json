[
["index.html", "STAT 454 Bayesian Statistics - Pet Adoption Chapter 1 Preface", " STAT 454 Bayesian Statistics - Pet Adoption Connie Zhang, Spring 2020 Macalester College Chapter 1 Preface Hello! Welcome to the bookdown of my STAT 454 Bayesian Statistics project! "],
["motivation.html", "Chapter 2 Motivation 2.1 Why this? 2.2 A snapshot", " Chapter 2 Motivation 2.1 Why this? sdghj 2.2 A snapshot asdfash "],
["data-source.html", "Chapter 3 Data Source 3.1 Variable Table", " Chapter 3 Data Source dfd 3.1 Variable Table "],
["data-cleaning.html", "Chapter 4 Data Cleaning", " Chapter 4 Data Cleaning jhgklja "],
["visualizations.html", "Chapter 5 Visualizations 5.1 General Impression 5.2 Starting off", " Chapter 5 Visualizations 5.1 General Impression 5.2 Starting off "],
["ordered-logistic-regression.html", "Chapter 6 Ordered Logistic Regression 6.1 Proportional Odds Assumption 6.2 Interpretation", " Chapter 6 Ordered Logistic Regression Have you ever wondered what to do when you want to predict more than 2 categories, and these categories seem to be ordered*? Ordered logistic regression is the way to go! 6.1 Proportional Odds Assumption For ordered logistic regression, we assume that the relationship between each pair of outcome groups is the same. In other words, the coefficient for variable A will be the same regardless of whether it’s describing the relationship between outcome group 1 and 2, or outcome group 2 and 3. 6.2 Interpretation The interpretation for ordered logistic regression is very similar to logistic regression. Let Y be an ordinal outcome with J categories. \\(\\beta_{j0}\\)s are the “cutpoints” between adjacent categories, often seen as the intercept. \\(\\beta_i\\)s are the coefficients, and \\(x_i\\)s are prediction variables. Our logistic regression model would look something like this: \\[logit(P(Y\\leq j))=\\beta_{j0}+\\beta_1x_1-...-\\beta_nx_n\\] We will see a specific example of this in the next chapter. *In this case, we have 5 categories for adoption speed, and we believe that the “distance” between these 5 adoption speeds are not equal. "],
["modelling.html", "Chapter 7 Modelling 7.1 Model 1 7.2 Model 2 7.3 Model 3 7.4 Making some adjustments", " Chapter 7 Modelling First, let’s load some essential package. We will also create a sample of 1000 for faster modelling. load(&quot;adoption.RData&quot;) set.seed(454) mysample &lt;- adoption[sample(1:nrow(adoption), 1000, replace=FALSE),] Below is the function I wrote to compute the accuracy of each model. ordinal_accuracy&lt;-function(post_preds,mydata){ post_preds&lt;-as.data.frame(post_preds) results&lt;-c() for (j in (1:length(post_preds))){ results[j]&lt;-as.numeric(tail(names(sort(table(post_preds[,j]))))[5]) } results&lt;-as.data.frame(results) compare&lt;-cbind(results,mydata$AdoptionSpeed) compare&lt;-compare %&gt;%mutate(results=as.numeric(results)) compare&lt;-compare %&gt;% mutate(`mydata$AdoptionSpeed`=as.numeric(`mydata$AdoptionSpeed`)) compare&lt;-compare %&gt;%mutate(accuracy=ifelse(as.numeric(results)==as.numeric(`mydata$AdoptionSpeed`),1,0)) print(sum(compare$accuracy)/length(post_preds)) } 7.1 Model 1 From fig 1- fig n, we see that health factors and type can be useful factors in predicting adoption speed. For this model, we have to set a R2 prior. I set R2 at 0.5 and what=NULL, which will give us a standard uniform prior on R2. ### Model Building \\[ \\text{Let }Y_i\\text{ be the adoption speed with k=0,1,2,3,4.} \\\\y_i|(\\beta_{0k},\\beta_1,...,\\beta_6)\\sim Bern(\\theta_{ki})\\text{ where }\\theta_{ki}\\text{ is the }P(Y_i\\leq k)\\text{ for the }i^{th}\\text{ animal.} \\\\log(\\frac{\\theta_{ki}}{1-\\theta_{ki}})=logit(\\hat P(Y\\leq k))=\\beta_{k0}+\\beta_1x_1...+\\beta_5x_5 \\\\\\text{ where }x_i\\text{ for i from 1 to 6 is the indicator for cat, minor injury, severe injury,} \\\\\\text{sterilization, vaccination, and dewormed.} \\\\\\beta_{k0}\\sim N(m_{k0},s_{k0}^2) \\\\\\beta_1\\sim N(m_1,s_1^2) \\\\...\\] model1 &lt;- stan_polr(AdoptionSpeed ~ Type+Health+Sterilized+Vaccinated+Dewormed, data =mysample, prior=R2(0.5,what=NULL),iter=5000, seed = 454) 7.1.1 Posterior Inference model1_summary&lt;-summary(model1) head(as.data.frame(model1_summary), -2) ## mean mcse sd 10% 50% ## Type1 -0.291472332 1.067107e-03 0.128917172 -0.45490997 -0.291619825 ## Health1 0.441523473 3.135560e-03 0.350471059 -0.01079189 0.437815394 ## Health2 2.289862443 1.401822e-02 1.356098798 0.68125324 2.195511682 ## Sterilized1 0.690688772 1.535365e-03 0.164162835 0.48092258 0.688819102 ## Vaccinated1 0.318715747 1.655190e-03 0.179963272 0.08924947 0.318538724 ## Dewormed1 -0.001789522 1.616438e-03 0.168594313 -0.21720001 -0.001004759 ## 0|1 -3.355148548 2.201978e-03 0.232536209 -3.65773490 -3.349498499 ## 1|2 -1.058289904 1.284121e-03 0.139953255 -1.23837624 -1.057180267 ## 2|3 0.276656461 1.187258e-03 0.133952418 0.10538132 0.276139337 ## 3|4 1.272267361 1.207162e-03 0.140589158 1.09125504 1.271952833 ## mean_PPD:0 0.031505172 8.265987e-05 0.008632395 0.02093596 0.030788177 ## mean_PPD:1 0.203957020 1.955397e-04 0.019572049 0.17980296 0.203201970 ## mean_PPD:2 0.288257266 2.204405e-04 0.022416216 0.25985222 0.288177340 ## mean_PPD:3 0.214343966 1.973403e-04 0.020048851 0.18965517 0.214285714 ## 90% n_eff Rhat ## Type1 -0.12640415 14595 0.9999596 ## Health1 0.89662335 12493 0.9997813 ## Health2 4.02976553 9358 0.9999248 ## Sterilized1 0.90384820 11432 1.0000488 ## Vaccinated1 0.54993335 11821 0.9998534 ## Dewormed1 0.21453193 10878 0.9998297 ## 0|1 -3.06134550 11152 1.0000541 ## 1|2 -0.87929294 11878 0.9998446 ## 2|3 0.44947033 12729 1.0000083 ## 3|4 1.45397384 13564 1.0001160 ## mean_PPD:0 0.04310345 10906 0.9999094 ## mean_PPD:1 0.23029557 10018 0.9999413 ## mean_PPD:2 0.31650246 10341 1.0001028 ## mean_PPD:3 0.24014778 10322 1.0000672 set.seed(454) model_data1&lt;-mysample %&gt;% dplyr::select(AdoptionSpeed, Type,Health,Sterilized,Vaccinated,Dewormed) %&gt;% na.omit() my_prediction1 &lt;- posterior_predict( model1, newdata = model_data1) ordinal_accuracy(my_prediction1,model_data1) ## [1] 0.2438424 The formula using the posterior means of each variable is: \\[logit(\\hat P(Y\\leq k))=\\beta_{k0}-0.291*Type+0.442*Health1+2.290*Health2+0.691*Sterilized1 \\\\+0.319*Vaccinated1-0.002*Dewormed1 \\\\\\text{For k =0,1,2,3,4}, \\beta_{k0}=0,-3.62,-1.42,-0.17,0.76\\text{ respectively}\\] The accuracy for this model is 0.244. If an animal has a severe injury, then the odds of that animal getting adopted slower will increase by e^2.290=9.87 times than a healthy animal, keeping all other variables constant. We can see that the mean of Dewormed is near zero, therefore, we will exclude Dewormed in our future model. 7.2 Model 2 With further investigations, we have also found “AgeGroup” and “mix_breed” to be important factors. We will include these in our models. 7.2.1 Model Building \\[ \\text{Let }Y_i\\text{ be the adoption speed with k=0,1,2,3,4.} \\\\y_i|(\\beta_{0k},\\beta_1,...,\\beta_10)\\sim Bern(\\theta_{ki})\\text{ where }\\theta_{ki}\\text{ is the }P(Y_i\\leq k)\\text{ for the }i^{th}\\text{ animal.} \\\\log(\\frac{\\theta_{ki}}{1-\\theta_{ki}})=logit(\\hat P(Y\\leq k))=\\beta_{k0}+\\beta_1x_1...+\\beta_{10}x_{10} \\\\\\text{ where }x_i\\text{ for i from 1 to 11 is the indicator for cat, minor/severe injury,} \\\\\\text{sterilization, vaccination, age groups 1-5, and Mix breed.} \\\\\\beta_{k0}\\sim N(m_{k0},s_{k0}^2) \\\\\\beta_1\\sim N(m_1,s_1^2) \\\\...\\] model2 &lt;- stan_polr(AdoptionSpeed ~ Type+Health+Sterilized+Vaccinated+AgeGroup+MixedBreed, data =mysample, prior=R2(0.5,what=NULL),iter=5000, seed = 454) 7.2.2 Posterior Inference model2_summary&lt;- summary(model2) head(as.data.frame(model2_summary), -2) ## mean mcse sd 10% 50% ## Type1 0.48778366 1.707863e-03 0.221427458 0.19976369 0.48937164 ## Health1 0.47969467 3.195916e-03 0.348317802 0.03818016 0.47965636 ## Health2 1.67486939 1.220502e-02 1.279389983 0.13553622 1.58676636 ## Sterilized1 0.47813952 1.457010e-03 0.181320803 0.24420605 0.47770227 ## Vaccinated1 0.24826375 1.199002e-03 0.149064908 0.05697017 0.24762385 ## AgeGroup1 0.54348134 1.459234e-03 0.170443602 0.32467603 0.54231742 ## AgeGroup2 0.66716931 1.993412e-03 0.227959035 0.37680824 0.66989071 ## AgeGroup3 0.96625893 3.180660e-03 0.345682844 0.51766283 0.95983629 ## AgeGroup4 0.65239525 3.793133e-03 0.437359847 0.08932112 0.64813984 ## AgeGroup5 0.53430605 5.266733e-03 0.592109782 -0.22336947 0.52774019 ## MixedBreed1 1.06601710 2.044574e-03 0.228975968 0.77289049 1.06582076 ## 0|1 -2.45032288 2.856396e-03 0.287372279 -2.81857404 -2.44775572 ## 1|2 -0.13451482 2.159830e-03 0.230288981 -0.43149332 -0.13648189 ## 2|3 1.23866701 2.011140e-03 0.232081787 0.93921284 1.23811248 ## 3|4 2.26420168 2.033693e-03 0.241510274 1.95486028 2.26515793 ## mean_PPD:0 0.03138345 7.841415e-05 0.008449069 0.02068127 0.03041363 ## mean_PPD:1 0.20154197 1.840315e-04 0.019143089 0.17761557 0.20072993 ## mean_PPD:2 0.28724696 2.128690e-04 0.022075926 0.25912409 0.28710462 ## mean_PPD:3 0.21470985 1.891734e-04 0.019819265 0.18978102 0.21411192 ## 90% n_eff Rhat ## Type1 0.76985933 16810 0.9998001 ## Health1 0.92512579 11878 0.9998389 ## Health2 3.31114337 10988 0.9999712 ## Sterilized1 0.70659244 15487 0.9997555 ## Vaccinated1 0.43924717 15457 0.9997827 ## AgeGroup1 0.76354356 13643 1.0000624 ## AgeGroup2 0.95776625 13077 0.9998310 ## AgeGroup3 1.41472859 11812 0.9996562 ## AgeGroup4 1.21477049 13295 0.9997109 ## AgeGroup5 1.29127895 12639 0.9998504 ## MixedBreed1 1.35920999 12542 0.9997835 ## 0|1 -2.08201004 10122 0.9998176 ## 1|2 0.16165719 11369 0.9997512 ## 2|3 1.53309341 13317 0.9998544 ## 3|4 2.57697695 14103 0.9998261 ## mean_PPD:0 0.04257908 11610 0.9998802 ## mean_PPD:1 0.22627737 10820 1.0000967 ## mean_PPD:2 0.31630170 10755 0.9999731 ## mean_PPD:3 0.23965937 10976 0.9998674 set.seed(454) model_data2&lt;-mysample %&gt;% dplyr::select(AdoptionSpeed, Type,Health,Sterilized,Vaccinated,AgeGroup,MixedBreed) %&gt;% na.omit() my_prediction2 &lt;- posterior_predict( model2, newdata = model_data2) ordinal_accuracy(my_prediction2,model_data2) ## [1] 0.2372263 The model accuracy is something. If an animal has a severe injury, then the odds of that animal getting adopted slower will increase by e^2.290=9.87 times than a healthy animal, keeping all other variables constant. We can see that the mean of Dewormed is near zero, therefore, we will exclude Dewormed in our future model. If an animal is in age group 1(4 to 11 months), then the odds of that animal getting adopted slower will increase by e^0.5=1.65 times than an animal that is in age group 0 (0 to 3 months), keeping all other variables constant. Similar situations apply to other age groups as well. From this, we can reasonably infer that animals in age group 0 are the most popular. If an animal is a Mixed Breed, then the odds of that animal getting adopted slower will increase by e^1.1=3.00 times than an animal that is not mixed breed, keeping all other variables constant. 7.3 Model 3 In this model, we will be adding two interaction terms. The figure below shows that the younger the animal is, the less likely it will get sterilized, since the procedure can’t be done when they are young. Moreover, only dogs can be mixed breed. Therefore, we will add two interaction terms: Type\\(*\\)MixedBreed and AgeGroup\\(*\\)Sterilization. set.seed(454) mysample2 &lt;- adoption[sample(1:nrow(adoption), 5000, replace=FALSE),] 7.3.1 Model Building \\[ \\text{Let }Y_i\\text{ be the adoption speed with k=0,1,2,3,4.} \\\\y_i|(\\beta_{0k},\\beta_1,...,\\beta_16)\\sim Bern(\\theta_{ki})\\text{ where }\\theta_{ki}\\text{ is the }P(Y_i\\leq k)\\text{ for the }i^{th}\\text{ animal.} \\\\log(\\frac{\\theta_{ki}}{1-\\theta_{ki}})=logit(\\hat P(Y\\leq k))=\\beta_{k0}+\\beta_1x_1...+\\beta_{10}x_{10}+\\beta_{11}x_1*x_10+\\beta_{12}x_2*x_5+...+\\beta_{16}x_2*x_9 \\\\\\text{ where }x_i\\text{ for i from 1 to 10 is the indicator for cat, minor/severe injury,} \\\\\\text{sterilization, vaccination, age groups 1-5, and Mix breed.} \\\\\\beta_{12}\\text{ is the coefficient for the interaction term of Type*MixedBreed, and }\\beta_{13}\\text{ to } \\\\\\beta_{16}\\text{ are the coefficients for the interaction terms of AgeGroup*Sterilization.} \\\\\\beta_{k0}\\sim N(m_{k0},s_{k0}^2) \\\\\\beta_1\\sim N(m_1,s_1^2) \\\\...\\] model3 &lt;- stan_polr(AdoptionSpeed ~ Type*MixedBreed+Health+Vaccinated+AgeGroup*Sterilized, data=mysample2, prior=R2(0.5,what=NULL),iter=5000, seed = 454) 7.3.2 Posterior Inference model3_summary&lt;- summary(model3) head(as.data.frame(model3_summary), -2) ## mean mcse sd 10% ## Type1 0.47184938 7.571442e-04 0.099369735 0.34502111 ## MixedBreed1 1.14663714 8.664970e-04 0.101586057 1.01709918 ## Health1 0.05122540 1.800379e-03 0.186304253 -0.18641892 ## Health2 0.80278228 7.639989e-03 0.791432469 -0.17825145 ## Vaccinated1 -0.02398087 4.980604e-04 0.068539997 -0.11133954 ## AgeGroup1 0.78827616 6.739903e-04 0.082801489 0.68306260 ## AgeGroup2 0.99417754 1.215189e-03 0.140377451 0.81315639 ## AgeGroup3 1.10500884 2.233080e-03 0.246135644 0.78769484 ## AgeGroup4 0.40492872 3.234301e-03 0.342977893 -0.03423933 ## AgeGroup5 0.47426010 3.940640e-03 0.439456830 -0.09357260 ## Sterilized1 0.84939855 1.735068e-03 0.191216558 0.60522760 ## Type1:MixedBreed1 9.60650467 2.003167e-01 8.358244119 0.67992165 ## AgeGroup1:Sterilized1 -0.49303379 2.160991e-03 0.227324592 -0.78430283 ## AgeGroup2:Sterilized1 -0.59788121 2.346639e-03 0.251455000 -0.92172987 ## AgeGroup3:Sterilized1 -0.24281600 3.346378e-03 0.345010132 -0.68583759 ## AgeGroup4:Sterilized1 -0.08827534 4.418418e-03 0.447682740 -0.65330275 ## AgeGroup5:Sterilized1 0.18924715 5.880433e-03 0.591016385 -0.55840190 ## 0|1 -2.54365116 1.124570e-03 0.131534402 -2.71177567 ## 1|2 -0.11229020 8.622524e-04 0.102904006 -0.24379952 ## 2|3 1.19277358 8.301020e-04 0.103300534 1.06108647 ## 3|4 2.27586557 8.608239e-04 0.107812529 2.13864991 ## mean_PPD:0 0.02865755 3.308651e-05 0.003629155 0.02405832 ## mean_PPD:1 0.20931018 8.658040e-05 0.008713952 0.19805589 ## mean_PPD:2 0.27400564 9.274487e-05 0.009704716 0.26172539 ## mean_PPD:3 0.22778564 8.593592e-05 0.009222251 0.21603888 ## 50% 90% n_eff Rhat ## Type1 0.47091238 0.59933768 17225 0.9998226 ## MixedBreed1 1.14689331 1.27840125 13745 1.0000647 ## Health1 0.05300266 0.28981134 10708 1.0001129 ## Health2 0.77418860 1.82183142 10731 1.0000717 ## Vaccinated1 -0.02443910 0.06307548 18938 0.9997683 ## AgeGroup1 0.78826905 0.89432167 15093 0.9999267 ## AgeGroup2 0.99477645 1.17592832 13345 1.0001559 ## AgeGroup3 1.10521743 1.42164234 12149 0.9999162 ## AgeGroup4 0.40536116 0.84467658 11245 1.0003545 ## AgeGroup5 0.48029323 1.03811684 12437 0.9996569 ## Sterilized1 0.84696443 1.09515953 12146 0.9998550 ## Type1:MixedBreed1 7.82300479 21.15974714 1741 1.0009795 ## AgeGroup1:Sterilized1 -0.49095946 -0.20468675 11066 0.9998388 ## AgeGroup2:Sterilized1 -0.60228281 -0.27214750 11482 1.0002522 ## AgeGroup3:Sterilized1 -0.24425243 0.20395097 10630 0.9998063 ## AgeGroup4:Sterilized1 -0.08286997 0.47721077 10266 1.0002454 ## AgeGroup5:Sterilized1 0.18463079 0.94998265 10101 0.9998151 ## 0|1 -2.54213853 -2.37739940 13681 1.0000021 ## 1|2 -0.11187468 0.02045730 14243 0.9997855 ## 2|3 1.19304425 1.32506508 15486 0.9998167 ## 3|4 2.27509305 2.41527433 15686 0.9998125 ## mean_PPD:0 0.02867558 0.03329283 12031 0.9999401 ## mean_PPD:1 0.20923451 0.22041312 10130 0.9997596 ## mean_PPD:2 0.27387606 0.28651276 10949 0.9997499 ## mean_PPD:3 0.22770352 0.23961118 11517 0.9997480 set.seed(454) model_data3&lt;-mysample2 %&gt;% dplyr::select(AdoptionSpeed, Type,Health,Sterilized,Vaccinated,AgeGroup,MixedBreed) %&gt;% na.omit() my_prediction3 &lt;- posterior_predict( model3, newdata = model_data3) ordinal_accuracy(my_prediction3,model_data3) ## [1] 0.2038882 The model accuracy is something. 7.4 Making some adjustments Our accuracy is less than ideal. One reason behind this could be due to how adoption speed is grouped. Group 0 is being adopted the day of, group 1 is being adopted between 2-7 days, and group 2 is being adopted between 8-30 days. The difference between group 0,1, and 2 can be due to chance, therefore, I’ve decided to group groups 0,1, and 2 into 1 group for our final model. "],
["final-model.html", "Chapter 8 Final Model 8.1 Discussion", " Chapter 8 Final Model The three group model. Fitting on training data then applying it to testing data. 8.1 Discussion What this model tells us. Which factors are important? What can we do to improve our model (cuteness meter)? "],
["shiny-apps.html", "Chapter 9 Shiny Apps! 9.1 User Input", " Chapter 9 Shiny Apps! 9.1 User Input "],
["final-reflections.html", "Chapter 10 Final Reflections 10.1 Advice for first time capstone people 10.2 Acknowledgements 10.3 Citations", " Chapter 10 Final Reflections 10.1 Advice for first time capstone people 10.2 Acknowledgements 10.3 Citations "]
]
